module.exports = {
    env: {
        es6: true,
        browser: true,
        node: true,
    },
    reportUnusedDisableDirectives: true,
    extends: [
        './standard',
        'plugin:import/recommended',
        'plugin:eslint-comments/recommended',
        'plugin:jsonc/recommended-with-jsonc',
        'plugin:markdown/recommended',
    ],
    ignorePatterns: [
        '*.min.*',
        '*.d.ts',
        'CHANGELOG.md',
        'dist',
        'LICENSE*',
        'output',
        'out',
        'coverage',
        'public',
        'temp',
        'package-lock.json',
        'pnpm-lock.yaml',
        'yarn.lock',
        '__snapshots__',
        '*.css',
        '*.png',
        '*.ico',
        '*.toml',
        '*.patch',
        '*.txt',
        '*.crt',
        '*.key',
        'Dockerfile',
        '!.github',
        '!.vscode',
    ],
    plugins: ['html', 'unicorn', 'unused-imports'],
    settings: {
        'import/resolver': {
            node: { extensions: ['.js', '.mjs'] },
        },
    },
    overrides: [
        {
            files: ['*.json', '*.json5', '*.jsonc'],
            parser: 'jsonc-eslint-parser',
            rules: {
                'jsonc/array-bracket-spacing': ['error', 'never'],
                'jsonc/comma-dangle': ['error', 'never'],
                'jsonc/comma-style': ['error', 'last'],
                'jsonc/indent': 'off',
                'jsonc/key-spacing': ['error', { beforeColon: false, afterColon: true }],
                'jsonc/no-octal-escape': 'error',
                'jsonc/object-curly-newline': ['error', { multiline: true, consistent: true }],
                'jsonc/object-curly-spacing': ['error', 'always'],
                'jsonc/object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],
            },
        },
        {
            files: ['package.json'],
            parser: 'jsonc-eslint-parser',
            rules: {
                'jsonc/sort-keys': [
                    'error',
                    {
                        pathPattern: '^$',
                        order: [
                            'publisher',
                            'name',
                            'displayName',
                            'type',
                            'version',
                            'private',
                            'packageManager',
                            'description',
                            'keywords',
                            'categories',
                            'sideEffects',
                            'exports',
                            'main',
                            'module',
                            'unpkg',
                            'jsdelivr',
                            'types',
                            'typesVersions',
                            'bin',
                            'icon',
                            'files',
                            'engines',
                            'activationEvents',
                            'contributes',
                            'scripts',
                            'peerDependencies',
                            'peerDependenciesMeta',
                            'dependencies',
                            'optionalDependencies',
                            'devDependencies',
                            'pnpm',
                            'author',
                            'license',
                            'funding',
                            'homepage',
                            'repository',
                            'bugs',
                            'overrides',
                            'resolutions',
                            'husky',
                            'simple-git-hooks',
                            'lint-staged',
                            'eslintConfig',
                        ],
                    },
                    {
                        pathPattern: '^(?:dev|peer|optional|bundled)?[Dd]ependencies$',
                        order: { type: 'asc' },
                    },
                    {
                        pathPattern: '^exports.*$',
                        order: [
                            'types',
                            'require',
                            'import',
                        ],
                    },
                ],
            },
        },
        {
            files: ['*.d.ts'],
            rules: {
                'import/no-duplicates': 'off',
            },
        },
        {
            files: ['*.js', '*.cjs', '*.jsx'],
            rules: {
                '@typescript-eslint/no-var-requires': 'off',
                '@typescript-eslint/no-require-imports': 'off',
            },
        },
        {
            // Needed for code blocks in markdown files
            files: ['**/*.md/*.*'],
            rules: {
                '@typescript-eslint/no-redeclare': 'off',
                '@typescript-eslint/no-unused-vars': 'off',
                '@typescript-eslint/no-use-before-define': 'off',
                '@typescript-eslint/no-var-requires': 'off',
                '@typescript-eslint/comma-dangle': 'off',
                '@typescript-eslint/consistent-type-imports': 'off',
                '@typescript-eslint/no-namespace': 'off',
                '@typescript-eslint/no-require-imports': 'off',
                'import/no-unresolved': 'off',
                'unused-imports/no-unused-imports': 'off',
                'unused-imports/no-unused-vars': 'off',
                'no-alert': 'off',
                'no-console': 'off',
                'no-restricted-imports': 'off',
                'no-undef': 'off',
                'no-unused-expressions': 'off',
                'no-unused-vars': 'off',
            },
        },
        {
            files: ['*.ts', '*.tsx', '*.mts', '*.cts'],
            rules: {
                'no-void': ['error', { allowAsStatement: true }],
            },
        },
    ],
    rules: {
        // Import
        'import/first': 'error',
        'import/order': 'error',
        'import/no-absolute-path': ['error', { esmodule: true, commonjs: true }],
        'import/no-mutable-exports': 'error',
        'import/no-named-as-default': 0,
        'import/no-unresolved': 'off',
        'import/newline-after-import': ['error', { count: 1, considerComments: true }],

        // Common
        'array-bracket-spacing': ['error', 'never'],
        'block-spacing': ['error', 'always'],
        'brace-style': ['error', '1tbs', { allowSingleLine: true }],
        camelcase: 'off',
        'comma-dangle': ['error', 'never'],
        'comma-spacing': ['error', { before: false, after: true }],
        'comma-style': ['error', 'last'],
        curly: ['error', 'multi-or-nest', 'consistent'],
        'func-call-spacing': ['error', 'never'],
        indent: ['error', 4, { SwitchCase: 1, VariableDeclarator: 1, outerIIFEBody: 1 }],
        'key-spacing': ['error', { beforeColon: false, afterColon: true }],
        'no-cond-assign': ['error', 'always'],
        'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'warn',
        'no-constant-condition': 'warn',
        'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',
        'no-mixed-spaces-and-tabs': 'error',
        'no-param-reassign': 'off',
        'no-restricted-syntax': ['error', 'DebuggerStatement', 'ForInStatement', 'LabeledStatement', 'WithStatement'],
        'no-return-await': 'off',
        'no-unused-vars': 'warn',
        'no-use-before-define': ['error', { functions: false, classes: false, variables: true }],
        'object-curly-spacing': ['error', 'always'],
        quotes: ['error', 'single', { allowTemplateLiterals: true }],
        semi: ['error', 'always'],
        'space-before-function-paren': ['error', { anonymous: 'never', named: 'never', asyncArrow: 'always' }],

        // ES6
        'arrow-parens': ['error', 'always'],
        'generator-star-spacing': 'off',
        'no-var': 'error',
        'object-shorthand': ['error', 'always', { ignoreConstructors: false, avoidQuotes: true }],
        'prefer-arrow-callback': ['error', { allowNamedFunctions: false, allowUnboundThis: true }],
        'prefer-const': ['error', { destructuring: 'any', ignoreReadBeforeAssign: true }],
        'prefer-exponentiation-operator': 'error',
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'prefer-template': 'error',

        // Best-practice
        'block-scoped-var': 'error',
        complexity: ['off', 11],
        'consistent-return': 'off',
        eqeqeq: ['error', 'smart'],
        'no-alert': 'warn',
        'no-case-declarations': 'error',
        'no-multi-spaces': 'error',
        'no-multi-str': 'error',
        'no-redeclare': ['error', { builtinGlobals: true }],
        'no-return-assign': 'off',
        'no-with': 'error',
        'no-void': 'error',
        'no-useless-escape': 'error',
        'no-useless-rename': 'error',
        'operator-linebreak': ['error', 'before'],
        'vars-on-top': 'error',
        'require-await': 'error',

        // unicorns
        // Pass error message when throwing errors
        'unicorn/error-message': 'error',
        // Uppercase regex escapes
        'unicorn/escape-case': 'error',
        // Array.isArray instead of instanceof
        'unicorn/no-array-instanceof': 'error',
        // Prevent deprecated `new Buffer()`
        'unicorn/no-new-buffer': 'error',
        // Keep regex literals safe!
        'unicorn/no-unsafe-regex': 'off',
        // Lowercase number formatting for octal, hex, binary (0x12 instead of 0X12)
        'unicorn/number-literal-case': 'error',
        // ** instead of Math.pow()
        'unicorn/prefer-exponentiation-operator': 'error',
        // includes over indexOf when checking for existence
        'unicorn/prefer-includes': 'error',
        // String methods startsWith/endsWith instead of more complicated stuff
        'unicorn/prefer-starts-ends-with': 'error',
        // textContent instead of innerText
        'unicorn/prefer-text-content': 'error',
        // Enforce throwing type error when throwing error while checking typeof
        'unicorn/prefer-type-error': 'error',
        // Use new when throwing error
        'unicorn/throw-new-error': 'error',
    },
}
